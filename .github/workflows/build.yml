name: Build and Publish PersonalQuery
on:
  push:
    branches:
      - main

env:
  GH_TOKEN: ${{ secrets.GH_TOKEN }}
  NODE_VERSION: 20

jobs:
  build:
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: src/electron
    strategy:
      matrix:
        include:
          - os: windows-latest
          - os: macos-latest
            mac_arch: arm64
          - os: macos-latest
            mac_arch: x64

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup Node
        uses: actions/setup-node@master
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Poetry
        run: pip install poetry

      # ------------------------------------------------
      # Backend build (runs BEFORE Electron packaging)
      # ------------------------------------------------

      - name: Install backend dependencies
        working-directory: src/py-backend
        run: poetry install --no-root

      - name: Build backend executable
        working-directory: src/py-backend
        run: poetry run pyinstaller personalquery-backend.spec
        env:
          LANGSMITH_TRACING: false
          LANGSMITH_ENDPOINT: https://api.smith.langchain.com
          LANGSMITH_API_KEY: ${{ secrets.LANGSMITH_API_KEY }}
          LANGSMITH_PROJECT: personalQuery
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      #      # macOS: Import signing certificate FIXME
      #      - name: Import macOS code signing certificate
      #        if: startsWith(matrix.os, 'macos')
      #        run: |
      #          echo "${CSC_LINK}" > certificate.p12
      #          security create-keychain -p "" build.keychain
      #          security default-keychain -s build.keychain
      #          security unlock-keychain -p "" build.keychain
      #          security import certificate.p12 -k build.keychain -P "${CSC_KEY_PASSWORD}" -T /usr/bin/codesign
      #          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
      #        env:
      #          CSC_LINK: ${{ secrets.CSC_LINK }}
      #          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}


      # Windows: Sign backend executable
      - name: Sign backend executable (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          AzureSignTool sign \
            --azure-key-vault-url "${AZURE_ENDPOINT}" \
            --azure-key-vault-client-id "${AZURE_CLIENT_ID}" \
            --azure-key-vault-tenant-id "${AZURE_TENANT_ID}" \
            --azure-key-vault-client-secret "${AZURE_CLIENT_SECRET}" \
            --azure-key-vault-certificate "${AZURE_CERT_PROFILE_NAME}" \
            --file "dist/pq-backend.exe" \
            --description "PersonalQuery Backend" \
            --description-url "https://github.com/HASEL-UZH/PersonalQuery"
        env:
          AZURE_ENDPOINT: ${{ secrets.AZURE_ENDPOINT }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_CERT_PROFILE_NAME: ${{ secrets.AZURE_CERT_PROFILE_NAME }}

      #      # macOS: Sign backend executable FIXME
      #      - name: Sign backend executable (macOS)
      #        if: startsWith(matrix.os, 'macos')
      #        working-directory: src/py-backend
      #        run: |
      #          SIGN_ID=$(security find-identity -v -p codesigning | grep "Developer ID Application" | head -n1 | awk -F\" '{print $2}')
      #          echo "Using signing identity: $SIGN_ID"
      #
      #          codesign --deep --force --options runtime --timestamp \
      #            --sign "$SIGN_ID" \
      #            dist/pq-backend
      #        env:
      #          CSC_LINK: ${{ secrets.CSC_LINK }}
      #          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
      #
      #      # macOS: Verify signature
      #      - name: Verify macOS signature
      #        if: startsWith(matrix.os, 'macos')
      #        working-directory: src/py-backend
      #        run: |
      #          codesign --verify --deep --strict --verbose=2 dist/pq-backend
      #        env:
      #          CSC_LINK: ${{ secrets.CSC_LINK }}
      #          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}


      # ------------------------------------------------
      # Electron build (as in original workflow)
      # ------------------------------------------------

      - name: Install Electron dependencies
        run: npm ci

      - name: Build Electron App
        shell: bash
        run: |
          if [ "${{ matrix.os }}" == "macos-latest" ]; then
            if [ "${{ matrix.mac_arch }}" == "arm64" ]; then
              npm run build:mac:arm64
            else
              npm run build:mac:x64
            fi
          else
            npm run build
          fi
        env:
          MAC_ARCH_TYPE: ${{ matrix.mac_arch == 'arm64' && 'AppleSilicon' || 'Intel' }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          AZURE_PUBLISHER_NAME: ${{ vars.AZURE_PUBLISHER_NAME }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_ENDPOINT: ${{ secrets.AZURE_ENDPOINT }}
          AZURE_CODE_SIGNING_NAME: ${{ secrets.AZURE_CODE_SIGNING_NAME }}
          AZURE_CERT_PROFILE_NAME: ${{ secrets.AZURE_CERT_PROFILE_NAME }}
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
